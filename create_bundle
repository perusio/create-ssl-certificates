#!/bin/bash
### create_bundle --- Creates a certificate bundle for a given CA.

### Copyright (C) 2015 António P. P. Almeida <appa@perusio.net>

### Author: António P. P. Almeida <appa@perusio.net>

### Permission is hereby granted, free of charge, to any person obtaining a
### copy of this software and associated documentation files (the "Software"),
### to deal in the Software without restriction, including without limitation
### the rights to use, copy, modify, merge, publish, distribute, sublicense,
### and/or sell copies of the Software, and to permit persons to whom the
### Software is furnished to do so, subject to the following conditions:

### The above copyright notice and this permission notice shall be included in
### all copies or substantial portions of the Software.

### Except as contained in this notice, the name(s) of the above copyright
### holders shall not be used in advertising or otherwise to promote the sale,
### use or other dealings in this Software without prior written authorization.

### THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
### IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
### FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
### THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
### LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
### FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
### DEALINGS IN THE SOFTWARE.
SCRIPTNAME=${0##*/}

function print_usage() {
    echo "Usage: $SCRIPTNAME [-c <Certificate Authority>] [-w] <server certificate>"
}

## Check the number of arguments.
if [ $# -lt 1 ]; then
    print_usage
    exit 1
fi

## Source the defaults.
. $(dirname $0)/defaults.sh

## Parsing the options.
while getopts :c:w OPT; do
    case $OPT in
        c|+c)
            CA="$OPTARG"
            ;;
        w|+w)
            WILDCARD=1
            ;;
        *)
            print_usage
            exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1

## Check that the certificate authority directory exists.
CA_DIR=$(dirname $0)/$CA
if [ ! -d $CA_DIR ]; then
    print_usage
    exit 3
fi

## The server cert file name.
SERVER_CERT=${1##*/}

## The server cert filename without extension.
SERVER_CERT_ORIG=${SERVER_CERT%%.pem}
SERVER_CERT_ORIG+="_orig.pem"
## The full path to new name of the original server certificate file.
SERVER_CERT_ORIG=$(dirname $1)/$SERVER_CERT_ORIG

## Copy the original server cert to the new file backup the original
## file, just in case something goes wrong.
cp --backup --suffix='.orig_from_ca' $1 $SERVER_CERT_ORIG

## Creates a certificate bundle for nginx with all the validation
## chain from the web server certificate to the Root CA certificate.
## $1: CA certificates directory.
## $2: Server Certificate issued by the CA.
## $3: Intermediate CA certificate.
## $4: Output file name for the certificate.
function create_bundle() {
    cat $2 $1/$3 > "$4"
    [ -f $4 ] && echo "$SCRIPTNAME: $4 bundle certificate created."
}

## Create the certificate bundle.
case "$CA$WILDCARD" in
    thawte0)
        ## Normal certificates.
        create_bundle $CA_DIR $SERVER_CERT_ORIG SSL_SecondaryCA.pem $1
        ;;
    thawte1)
        ## Wildcard certificates.
        create_bundle $CA_DIR $SERVER_CERT_ORIG SSL_SecondaryG2CA.pem $1
        ;;
    startssl0)
        ## Normal certificates.
        create_bundle $CA_DIR $SERVER_CERT_ORIG sub.class1.server.ca.pem $1
        ;;
    *)
        print_usage
        exit 3
esac
